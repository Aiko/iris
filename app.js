/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
// Utilities
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
const Sentry = require('@sentry/node')
// TODO: use sentry electron and do the config for that
// TODO: should also track environment
// TODO: bug reports, managed updates, etc. for electron
Sentry.init({ dsn: 'https://a5c7cbba227443c09affd9b2aee59dea@sentry.io/1886420' })
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
// Logger :)
const Log = require('./src/js/utils/logger')
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////
// Startup
/////////////////////////////////////////////////////////
Log.log("Starting up")
const { app, BrowserWindow, ipcMain } = require('electron')
Log.log("Checking Electron Squirrel Startup")
if (require('electron-squirrel-startup')) app.quit()
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
// Set up OAuth clients
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
const GOAuth = require('./src/js/oauth/goauth')
const MSAuth = require('./src/js/oauth/msoauth')

Log.log("Setting up GOauth")
GOAuth(
  '446179098641-5cafrt7dl4rsqtvi5tjccqrbknurtr7k.apps.googleusercontent.com',
  null, // no client secret if you registered as iOS app!
  ['https://mail.google.com']
)

Log.log("Setting up MSOauth")
MSAuth(
  '65b77461-4950-4abb-b571-ad129d9923a3'
)
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
// Require mailing tools
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
Log.log("Setting up email IPC")
require('./src/js/mail/email')
const Mailman = require('./src/js/mail/sendmail') // TODO: ipc
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
// Set up app preferences
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
const Prefs = require('./src/js/cache/prefs')('prefs.json')
Log.log("Loading preferences")
Prefs.data = Prefs.load()
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
// Controls the main window of our app :)
let win;
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
// Define entry scripts
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
const entry = () => {
  const signed_in = Prefs.data.authenticated

  if (signed_in) {
    Log.log("User is signed in, loading the main app.")
    win.loadURL(`file://${__dirname}/src/public/index.html`)
  }
  else {
    Log.log("User is not signed in, they will go thru the signin flow.")
    win.loadURL('https://helloaiko.com/email/signin')
  }
}

ipcMain.handle('reentry', (_, __) => entry())
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
// Define launch scripts
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
const init = () => {
  win = new BrowserWindow({
    show: false,
    frame: false,
    webPreferences: {
      nodeIntegration: true
      // FIXME: while this is enabled we have to be 1000% sure that
      // we are in no way shape or form loading scripts from any
      // external or unsafe source. However, disabling this will
      // totally and irreversibly cripple our IPC.

      // If you are coming across this on an audit please don't remove
      // it, as instead we have opted to ensure we aren't loading any
      // external scripts. It's a bit of a compromise we are forced to
      // make in order to make use of TCP sockets on the backend.
      // see: https://www.electronjs.org/docs/tutorial/security#3-enable-context-isolation-for-remote-content
      // Without this we would have to use IPC through preload which is
      // just as if not more so insecure :)

      // Our only other alternative is to run a local web server with
      // websockets from the backend and communicate in that manner.
      // We have elected not to do this, but if this option is fully
      // a pressing issue at the time of your audit, that would be our
      // alternative course of action.
    },
    // TODO: icon
    icon: './src/public-old/assets/img/icon.png'
  })
  win.maximize()
  win.show()

  entry()

  win.on('closed', () => {
    win = null
  })
}
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
// LAUNCH TIME ðŸš€ðŸš€ðŸš€ðŸš€ðŸš€ðŸš€
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
app.allowRendererProcessReuse = false
app.on('ready', init)

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') app.quit()
})

app.on('activate', () => {
  if (win === null) init()
})
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
// Some useful variables
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
module.exports = {
  platform: process.platform
}
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////